{
  "address": "0xF1b2c142FF09eAc8dE9e6Ac19362e0F4bf895915",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PM_InsufficientApprovedAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "predictionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAbove",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "int224",
          "name": "priceReading",
          "type": "int224"
        },
        {
          "indexed": true,
          "internalType": "int224",
          "name": "priceTarget",
          "type": "int224"
        }
      ],
      "name": "ConcludeFatalError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "predictionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketHandler",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amountYes",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amountNo",
          "type": "int256"
        }
      ],
      "name": "HandlerProgress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "predictionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PredictionConcluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "predictionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketHandler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "PredictionCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PLATFORM_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes32Data",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_initiator",
          "type": "address"
        }
      ],
      "name": "concludePrediction_2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tokenSymbol",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_proxyAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAbove",
          "type": "bool"
        },
        {
          "internalType": "int224",
          "name": "_targetPricePoint",
          "type": "int224"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basePrice",
          "type": "uint256"
        }
      ],
      "name": "createPrediction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextPredictionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionId",
          "type": "uint256"
        }
      ],
      "name": "getPrediction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "int224",
              "name": "targetPricePoint",
              "type": "int224"
            },
            {
              "internalType": "bool",
              "name": "isAbove",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "proxyAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "marketHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "predictionTokenPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct Prediction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getPredictions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "int224",
              "name": "targetPricePoint",
              "type": "int224"
            },
            {
              "internalType": "bool",
              "name": "isAbove",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "proxyAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "marketHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "predictionTokenPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct Prediction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getProxiesForPredictions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionId",
          "type": "uint256"
        }
      ],
      "name": "getProxyForPrediction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_settlement",
          "type": "address"
        }
      ],
      "name": "setSettlementAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setTradingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVaultAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amountYes",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_amountNo",
          "type": "int256"
        }
      ],
      "name": "trackProgress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcabe854fff4db1538eb02bdb3ef96e17eeb67da1a869eb76acf7cb7367899b4e",
  "receipt": {
    "to": null,
    "from": "0x22b4fD82537573614340314f29bCb2fab182f409",
    "contractAddress": "0xF1b2c142FF09eAc8dE9e6Ac19362e0F4bf895915",
    "transactionIndex": 18,
    "gasUsed": "3827803",
    "logsBloom": "0x
    "blockHash": "0x819f2bf9120427e3888af152d3ddf30f1e4060b0968e36f2d83d3e9f5acd016e",
    "transactionHash": "0xcabe854fff4db1538eb02bdb3ef96e17eeb67da1a869eb76acf7cb7367899b4e",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 9738993,
        "transactionHash": "0xcabe854fff4db1538eb02bdb3ef96e17eeb67da1a869eb76acf7cb7367899b4e",
        "address": "0xF1b2c142FF09eAc8dE9e6Ac19362e0F4bf895915",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000022b4fd82537573614340314f29bcb2fab182f409"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x819f2bf9120427e3888af152d3ddf30f1e4060b0968e36f2d83d3e9f5acd016e"
      }
    ],
    "blockNumber": 9738993,
    "cumulativeGasUsed": "12110239",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7B28B177Bca06Abd37518F66ADa2825BF7386A7D"
  ],
  "numDeployments": 1,
  "solcInputHash": "8e9e1187a9d68a65943f6704ca5f0f81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PM_InsufficientApprovedAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAbove\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"int224\",\"name\":\"priceReading\",\"type\":\"int224\"},{\"indexed\":true,\"internalType\":\"int224\",\"name\":\"priceTarget\",\"type\":\"int224\"}],\"name\":\"ConcludeFatalError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketHandler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amountYes\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amountNo\",\"type\":\"int256\"}],\"name\":\"HandlerProgress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PredictionConcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"PredictionCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32Data\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"}],\"name\":\"concludePrediction_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenSymbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_proxyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAbove\",\"type\":\"bool\"},{\"internalType\":\"int224\",\"name\":\"_targetPricePoint\",\"type\":\"int224\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"name\":\"createPrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPredictionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"getPrediction\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"int224\",\"name\":\"targetPricePoint\",\"type\":\"int224\"},{\"internalType\":\"bool\",\"name\":\"isAbove\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"marketHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"predictionTokenPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Prediction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getPredictions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"int224\",\"name\":\"targetPricePoint\",\"type\":\"int224\"},{\"internalType\":\"bool\",\"name\":\"isAbove\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"marketHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"predictionTokenPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Prediction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getProxiesForPredictions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"getProxyForPrediction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settlement\",\"type\":\"address\"}],\"name\":\"setSettlementAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amountYes\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_amountNo\",\"type\":\"int256\"}],\"name\":\"trackProgress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"ConcludeFatalError(uint256,uint256,bool,int224,int224)\":{\"params\":{\"isAbove\":\"The target orice was supposed to be above a set limit.\",\"predictionId\":\"The unique identifier of the prediction.\",\"priceReading\":\"The current price reading provided by a dAPI.\",\"priceTarget\":\"The target point that was the base for a prediction.\",\"timestamp\":\"The timestamp when conclude failed.\"}},\"PredictionCreated(uint256,address,address,uint256,uint256)\":{\"params\":{\"creator\":\"The creator responsible for creating the prediction.\",\"marketHandler\":\"The address of the MarketHandler that enables the prediction to be traded upon.\",\"predictionId\":\"The unique identifier of the prediction.\",\"timestamp\":\"The timestamp when the prediction was created to be traded upon.\"}}},\"kind\":\"dev\",\"methods\":{\"concludePrediction_2(uint256,bool,address)\":{\"params\":{\"_predictionId\":\"The unique identifier for each prediction created.\",\"_vote\":\"The final result of the prediction. vote - True : The target price was predicted to be BELOW/ABOVE a threshold AND IS BELOW/ABOVE the threshold respectively. vote - False : The target price was predicted to be BELOW/ABOVE a threshold BUT IS ABOVE/BELOW the threshold respectively.\"}},\"constructor\":{\"params\":{\"_usdc\":\"The payment token addresTRADING_FEEs.\"}},\"createPrediction(bytes32,address,bool,int224,uint256,uint256)\":{\"params\":{\"_basePrice\":\"The minimum cost of one 'Yes' or 'No' token for the prediction market to be created. Is a multiple of 0.01 USD or 1 cent.\",\"_deadline\":\"The timestamp when the target and current price are to be checked against.\",\"_isAbove\":\"True if for a prediction the price will go above a set limit and false if otherwise.\",\"_tokenSymbol\":\"The symbol to represent the asset we are prediction upon. Eg : BTC / ETH / XRP etc.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"trackProgress(uint256,address,int256,int256)\":{\"details\":\"Is important since its harder to track each market handler on 'The Graph' separately.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ConcludeFatalError(uint256,uint256,bool,int224,int224)\":{\"notice\":\"To track if for some reason a certain prediction was not able to be concluded.\"},\"PredictionCreated(uint256,address,address,uint256,uint256)\":{\"notice\":\"Event to declare a prediction market is available to be traded.\"}},\"kind\":\"user\",\"methods\":{\"PLATFORM_FEE()\":{\"notice\":\"To avoid DDOS by adding some cost to the creation. Can't be changed once defined.\"},\"TRADING_FEE()\":{\"notice\":\"0.01% * 50 = 0.5%.\"},\"concludePrediction_2(uint256,bool,address)\":{\"notice\":\"Called by the Settlement contract which concludes the prediction and returns the vote i.e if the prediction was in the favour of 'Yes' or 'No'.\"},\"createPrediction(bytes32,address,bool,int224,uint256,uint256)\":{\"notice\":\"Called by the owner on behalf of the _caller and create a market for them.Step necessary to make sure all the parameters are vaild and are true with no manipulation.\"},\"getNextPredictionId()\":{\"notice\":\"Getter functions ------\"},\"setSettlementAddress(address)\":{\"notice\":\"Setter functions ------\"},\"settlementAddress()\":{\"notice\":\"The address that starts the chain of concluding a prediction.\"},\"trackProgress(uint256,address,int256,int256)\":{\"notice\":\"SPECIAL FUNCTION ====================================================Function provided to act as an aggregator and help track all the things that are happening on all of its child market handlers.\"},\"vaultAddress()\":{\"notice\":\"The address responsible for storing the funds collected.\"}},\"notice\":\"The centre point of Settlement and each new Market Handler\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/PredictionMarket.sol\":\"PredictionMarket\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/common/PredictionMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../v1/MarketHandler.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ninterface IVault {\\n    function rewardConcluder(address _receiver) external;\\n}\\n\\n/// @notice Structure to represent a given Prediction.\\nstruct Prediction {\\n    string tokenSymbol; // The token symbol in question\\n    int224 targetPricePoint; // The target price point\\n    bool isAbove; // This boolean is responsible for defining if the prediction is below or above the price point\\n    address proxyAddress; // Address of the relevant proxy contract for each asset.\\n    uint256 fee; // 1 = 0.01%, 100 = 1%, Creator's cut which is further divided as a 20:80 ratio where 20% goes to the protcol and remaining is held by the prediction creator.\\n    uint256 timestamp; // Timestamp of the creation of prediction\\n    uint256 deadline; // Timestamp when the prediction is to end\\n    bool isActive; // Check if the prediction is open or closed\\n    address marketHandler; // The contract responsible for betting on the prediction.\\n    uint256 predictionTokenPrice; // The price of either of the token for a given market handler.\\n}\\n\\n/// @notice Error codes\\nerror PM_Conclude_Failed();\\n\\n/// @notice The centre point of Settlement and each new Market Handler\\ncontract PredictionMarket is Context, Ownable {\\n    /// @notice Counter to track each new prediction\\n    using Counters for Counters.Counter;\\n    Counters.Counter private nextPredictionId;\\n\\n    /// @notice To avoid DDOS by adding some cost to the creation. Can't be changed once defined.\\n    uint256 public constant PLATFORM_FEE = 50 * 10 ** 6;\\n\\n    /// @notice 0.01% * 50 = 0.5%.\\n    uint256 public TRADING_FEE = 50;\\n\\n    /// @notice Mapping to track each Prediction with a unique Id.\\n    mapping(uint256 => Prediction) private predictions;\\n    /// @notice Mapping to track each Prediction's API3 dAPI proxy address. Only set in a function available\\n    /// to the owner to restrict any other address from creating a pseudo prediction and manipulate it how they see fit.\\n    mapping(uint256 => address) private predictionIdToProxy;\\n\\n    /// @notice To blacklist a certain address and disable their market creation feature.\\n    mapping(address => bool) private blacklisted;\\n\\n    /// @notice Event to declare a prediction market is available to be traded.\\n    /// @param predictionId The unique identifier of the prediction.\\n    /// @param marketHandler The address of the MarketHandler that enables the prediction to be traded upon.\\n    /// @param creator The creator responsible for creating the prediction.\\n    /// @param timestamp The timestamp when the prediction was created to be traded upon.\\n    event PredictionCreated(\\n        uint256 indexed predictionId,\\n        address indexed marketHandler,\\n        address creator,\\n        uint256 timestamp,\\n        uint256 indexed deadline\\n    );\\n\\n    /// @dev WILL ADD A BACKUP FORCE_CONCLUDE() TO MAKE SURE IF BECAUSE OF SOME ERROR A CERTAIN PREDICTION WASN'T ABLE\\n    /// @dev TO BE CONCLUDED EVEN AFTER ALL CONDITIONS PASS THE OWNER WILL STILL BE ABLE TO FORCE THE PREDICTION TO BE\\n    /// @dev CONCLUDED AND ALLOW THE PARTICIPANTS TO WITHDRAW THEIR REWARDS.\\n\\n    /// @notice To track if for some reason a certain prediction was not able to be concluded.\\n    /// @param predictionId The unique identifier of the prediction.\\n    /// @param isAbove The target orice was supposed to be above a set limit.\\n    /// @param timestamp The timestamp when conclude failed.\\n    /// @param priceReading The current price reading provided by a dAPI.\\n    /// @param priceTarget The target point that was the base for a prediction.\\n    event ConcludeFatalError(\\n        uint256 indexed predictionId,\\n        uint256 timestamp,\\n        bool isAbove,\\n        int224 indexed priceReading,\\n        int224 indexed priceTarget\\n    );\\n\\n    event HandlerProgress(\\n        uint256 indexed predictionId,\\n        address indexed marketHandler,\\n        address indexed trader,\\n        int256 amountYes,\\n        int256 amountNo\\n    );\\n\\n    event PredictionConcluded(uint256 indexed predictionId, uint256 timestamp);\\n\\n    /// @notice The payment token interface\\n    IERC20 immutable I_USDC_CONTRACT;\\n\\n    /// @notice The address that starts the chain of concluding a prediction.\\n    address public settlementAddress;\\n    /// @notice The address responsible for storing the funds collected.\\n    address public vaultAddress;\\n\\n    /// @notice Check if the address calling the function is the settlementAddress or not\\n    modifier callerIsSettlement(address _caller) {\\n        require(_caller == settlementAddress);\\n        _;\\n    }\\n\\n    modifier callerIsMarketHandler(uint256 _id, address _caller) {\\n        address marketHandlerAddress = predictions[_id].marketHandler;\\n        if (marketHandlerAddress == address(0))\\n            revert(\\\"Invalid Prediction Id!\\\");\\n        if (marketHandlerAddress != _caller)\\n            revert(\\\"Caller is not the market handler.\\\");\\n        _;\\n    }\\n\\n    /// @param _usdc The payment token addresTRADING_FEEs.\\n    constructor(address _usdc) {\\n        I_USDC_CONTRACT = IERC20(_usdc);\\n\\n        nextPredictionId.increment();\\n    }\\n\\n    function bytes32ToString(\\n        bytes32 _bytes32Data\\n    ) public pure returns (string memory) {\\n        bytes memory bytesData = new bytes(32);\\n        for (uint i = 0; i < 32; i++) {\\n            bytesData[i] = _bytes32Data[i];\\n        }\\n        return string(bytesData);\\n    }\\n\\n    /// @notice Called by the owner on behalf of the _caller and create a market for them.\\n    /// @notice Step necessary to make sure all the parameters are vaild and are true with no manipulation.\\n    /// @param _tokenSymbol The symbol to represent the asset we are prediction upon. Eg : BTC / ETH / XRP etc.\\n    /// @param _isAbove True if for a prediction the price will go above a set limit and false if otherwise.\\n    /// @param _deadline The timestamp when the target and current price are to be checked against.\\n    /// @param _basePrice The minimum cost of one 'Yes' or 'No' token for the prediction market to be created.\\n    /// Is a multiple of 0.01 USD or 1 cent.\\n    function createPrediction(\\n        bytes32 _tokenSymbol,\\n        address _proxyAddress,\\n        bool _isAbove,\\n        int224 _targetPricePoint,\\n        uint256 _deadline,\\n        uint256 _basePrice\\n    ) external returns (uint256) {\\n        /// @param _caller The address that is responsible for paying the platform a set fee and create a new prediction\\n        /// people can bet upon.\\n        address _caller = _msgSender();\\n\\n        require(\\n            I_USDC_CONTRACT.allowance(_caller, address(this)) >= PLATFORM_FEE,\\n            \\\"Allowance not set!\\\"\\n        );\\n        require(\\n            _proxyAddress != address(0),\\n            \\\"Can't have address zero as the proxy's address.\\\"\\n        );\\n        require(_deadline > block.timestamp, \\\"Deadline can't be in the past.\\\");\\n\\n        uint256 predictionId = nextPredictionId.current();\\n        Prediction memory prediction = predictions[predictionId];\\n\\n        require(prediction.timestamp == 0, \\\"Prediction already exists.\\\");\\n\\n        bool success = I_USDC_CONTRACT.transferFrom(\\n            _caller,\\n            address(this),\\n            PLATFORM_FEE\\n        );\\n        if (!success) revert PM_InsufficientApprovedAmount();\\n\\n        PM_MarketHandler predictionMH = new PM_MarketHandler(\\n            predictionId,\\n            TRADING_FEE,\\n            _deadline,\\n            _basePrice,\\n            address(I_USDC_CONTRACT),\\n            vaultAddress\\n        );\\n\\n        Prediction memory toAdd = Prediction({\\n            tokenSymbol: bytes32ToString(_tokenSymbol),\\n            targetPricePoint: _targetPricePoint,\\n            isAbove: _isAbove,\\n            proxyAddress: _proxyAddress,\\n            fee: TRADING_FEE,\\n            timestamp: block.timestamp,\\n            deadline: _deadline,\\n            marketHandler: address(predictionMH),\\n            predictionTokenPrice: _basePrice,\\n            isActive: true\\n        });\\n\\n        predictions[predictionId] = toAdd;\\n        predictionIdToProxy[predictionId] = _proxyAddress;\\n\\n        nextPredictionId.increment();\\n\\n        emit PredictionCreated(\\n            predictionId,\\n            address(predictionMH),\\n            _caller,\\n            block.timestamp,\\n            _deadline\\n        );\\n        return predictionId;\\n    }\\n\\n    /// @notice Called by the Settlement contract which concludes the prediction and returns the vote i.e if the\\n    /// prediction was in the favour of 'Yes' or 'No'.\\n    /// @param _predictionId The unique identifier for each prediction created.\\n    /// @param _vote The final result of the prediction.\\n    /// vote - True : The target price was predicted to be BELOW/ABOVE a threshold AND IS BELOW/ABOVE the threshold respectively.\\n    /// vote - False : The target price was predicted to be BELOW/ABOVE a threshold BUT IS ABOVE/BELOW the threshold respectively.\\n    function concludePrediction_2(\\n        uint256 _predictionId,\\n        bool _vote,\\n        address _initiator\\n    ) external callerIsSettlement(_msgSender()) {\\n        require(predictions[_predictionId].deadline > block.timestamp);\\n\\n        address associatedMHAddress = predictions[_predictionId].marketHandler;\\n        IMarketHandler mhInstance = IMarketHandler(associatedMHAddress);\\n\\n        mhInstance.concludePrediction_3(_vote);\\n\\n        /// Rewards for concluder\\n        IVault vaultContract = IVault(vaultAddress);\\n        vaultContract.rewardConcluder(_initiator);\\n\\n        emit PredictionConcluded(_predictionId, block.timestamp);\\n    }\\n\\n    /// @notice Setter functions ------\\n    function setSettlementAddress(address _settlement) external onlyOwner {\\n        settlementAddress = _settlement;\\n    }\\n\\n    function setVaultAddress(address _vault) external onlyOwner {\\n        vaultAddress = _vault;\\n    }\\n\\n    function setTradingFee(uint256 _newFee) external onlyOwner {\\n        TRADING_FEE = _newFee;\\n    }\\n\\n    /// @notice Getter functions ------\\n\\n    function getNextPredictionId() external view returns (uint256) {\\n        return nextPredictionId.current();\\n    }\\n\\n    function getPrediction(\\n        uint256 _predictionId\\n    ) external view returns (Prediction memory) {\\n        return predictions[_predictionId];\\n    }\\n\\n    function getPredictions(\\n        uint256[] memory _ids,\\n        uint256 _limit\\n    ) external view returns (Prediction[] memory) {\\n        Prediction[] memory toReturn;\\n        for (uint256 i = 0; i < _limit; i++) {\\n            toReturn[i] = (predictions[_ids[i]]);\\n        }\\n        return toReturn;\\n    }\\n\\n    function getProxyForPrediction(\\n        uint256 _predictionId\\n    ) external view returns (address) {\\n        return predictionIdToProxy[_predictionId];\\n    }\\n\\n    function getProxiesForPredictions(\\n        uint256[] memory _ids,\\n        uint256 _limit\\n    ) external view returns (address[] memory) {\\n        address[] memory toReturn;\\n        for (uint256 i = 0; i < _limit; i++) {\\n            toReturn[i] = predictionIdToProxy[_ids[i]];\\n        }\\n        return toReturn;\\n    }\\n\\n    /// SPECIAL FUNCTION ====================================================\\n    ///\\n    ///\\n    /// @notice Function provided to act as an aggregator and help track all the things that are happening on\\n    /// all of its child market handlers.\\n    /// @dev Is important since its harder to track each market handler on 'The Graph' separately.\\n    function trackProgress(\\n        uint256 _id,\\n        address _caller,\\n        int256 _amountYes,\\n        int256 _amountNo\\n    ) external callerIsMarketHandler(_id, _msgSender()) {\\n        address marketHandlerAddress = predictions[_id].marketHandler;\\n        emit HandlerProgress(\\n            _id,\\n            marketHandlerAddress,\\n            _caller,\\n            _amountYes,\\n            _amountNo\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xd52d454f48292d8a20a9b3f668eb3defbff1ef36c348d0485697c0976f215b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x6a463f8e07a3ad9ee4e101b1cc58abff3e4a328cdf6c2743d0abb37a6ecaffed\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMarketHandler {\\n    function swapTokenNoWithYes(uint256) external;\\n\\n    function swapTokenYesWithNo(uint256) external;\\n\\n    function buyNoToken(uint256) external;\\n\\n    function buyYesToken(uint256) external;\\n\\n    function sellNoToken(uint256) external;\\n\\n    function sellYesToken(uint256) external;\\n\\n    function concludePrediction_3(bool winner) external;\\n}\\n\",\"keccak256\":\"0x52aded2514f9ec42151bff9aa4192c219deaa2bd97a424100939ec05d23f1907\",\"license\":\"MIT\"},\"contracts/interfaces/IPredictionMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPredictionMarket {\\n    function trackProgress(\\n        uint256 _id,\\n        address _caller,\\n        int256 _amountYes,\\n        int256 _amountNo\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa607df51af93436f0db98ba780a25009c39b4b77eb0857a853daa768e9636fba\",\"license\":\"MIT\"},\"contracts/v1/MarketHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IMarketHandler.sol\\\";\\nimport \\\"../interfaces/IPredictionMarket.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nerror PM_IsClosedForTrading();\\nerror PM_IsOpenForTrading();\\nerror PM_InsufficientApprovedAmount();\\nerror PM_TokenTransferFailed();\\nerror PM_InsufficienTradeTokens();\\nerror PM_InvalidAmountSet();\\nerror PM_RewardsNotAvailable();\\nerror PM_RewardAlreadyCollected();\\nerror PM_UserDidNotWin();\\n\\n/// @notice Responsible for all the trading activity for a prediction created.\\ncontract PM_MarketHandler is Context, Ownable, IMarketHandler {\\n    using Counters for Counters.Counter;\\n\\n    // reserveUSDC - reserveFEE = reserveYes + reserveNo\\n    /// @notice Total USDC collected.\\n    uint256 public reserveUSDC;\\n    /// @notice Total platform fee collected so far.\\n    uint256 public reserveFEE;\\n    /// @notice Total USDC collected against Yes tokens.\\n    uint256 public reserveYes;\\n    /// @notice Total USDC collected against No tokens.\\n    uint256 public reserveNo;\\n\\n    /// @notice If rewards are ready to be claimed.\\n    bool public RewardsClaimable;\\n\\n    /// @notice The context of the side that won.\\n    bool public winner;\\n\\n    /// @notice The id alloted in the Trading contract for each prediction as predictionId.\\n    uint256 public immutable I_SELF_ID;\\n    /// @notice Price of 1 token of either side. Is a multiple of 10**4.\\n    uint256 public immutable I_BASE_PRICE;\\n    /// @notice When the market will close down.\\n    uint256 public immutable I_DEADLINE;\\n    /// @notice The decimal value set in the payment token. Is required to calculate the fee during any trading activity.\\n    uint256 public immutable I_DECIMALS;\\n\\n    /// 100% = 10**decimals(), 0.1% = 10**decimals()/1000.\\n    /// This is the total fee and this further divided between the creator and the platform.\\n    uint256 public immutable I_FEE;\\n\\n    /// @notice The interface for the payment token.\\n    IERC20 public immutable I_USDC_CONTRACT;\\n    /// @notice The vault address.\\n    address private I_VAULT_ADDRESS;\\n\\n    IPredictionMarket private I_PREDICTION_MARKET_CONTRACT;\\n\\n    /// @notice Variables to track the 'Yes' token and its holders\\n    /// @notice The current valid index where new address is to be pushed in the yesHolders array.\\n    Counters.Counter private yesIndex;\\n    ///@notice The array that holds all the address in possession of 'Yes' token.\\n    address[] private yesHolders;\\n    /// @notice Get the index of an address in the yesHolders array\\n    mapping(address => uint256) private yesTokenAddressToIndex;\\n    /// @notice Track the amount of 'Yes' tokens held by an address\\n    mapping(address => uint256) private YesBalances;\\n\\n    /// @notice SAME AS ABOVE BUT FOR 'NO' TOKENS.\\n    Counters.Counter private noIndex;\\n    address[] private noHolders;\\n    mapping(address => uint256) private noTokenAddressToIndex;\\n    mapping(address => uint256) private NoBalances;\\n\\n    /// @notice Check if a user collected their rewards to disable multiple withdrawls\\n    mapping(address => bool) private rewardCollected;\\n\\n    // Events\\n    /// @notice When a trader swaps their 'Yes' for 'No' or vica versa.\\n    event SwapOrder(address indexed trader, int256 amountYes, int256 amountNo);\\n    /// @notice When a trader buys a token either 'Yes' or 'No'.\\n    event BuyOrder(address indexed trader, uint256 amountYes, uint256 amountNo);\\n    /// @notice When a trader is looking to withdraw from the prediction and collected their invested amount.\\n    event SellOrder(\\n        address indexed trader,\\n        uint256 amountYes,\\n        uint256 amountNo\\n    );\\n    /// @notice The bool value the tells the nature of the prediction result.\\n    event WinnerDeclared(bool winner);\\n    /// @notice When a trader successfully collect their rewards.\\n    event RewardCollected(address indexed user, uint256 amountWon);\\n\\n    /// @notice Check if the collectRewards is open to be called by the winners.\\n    modifier isClaimable() {\\n        if (!RewardsClaimable) revert PM_RewardsNotAvailable();\\n        _;\\n    }\\n\\n    /// @notice Check if the market is Open for trades or not.\\n    modifier isOpen() {\\n        if (block.timestamp > I_DEADLINE) revert PM_IsClosedForTrading();\\n        _;\\n    }\\n\\n    /// @notice Check if the market is Closed for trades.\\n    modifier isClosed() {\\n        if (block.timestamp <= I_DEADLINE) revert PM_IsOpenForTrading();\\n        _;\\n    }\\n\\n    /// @param _id The unique predictionId set in the parent Trading contract.\\n    // _fee * 0.01% of the tokens regardless of the decimals value. Should be a natural number N.\\n    /// @param _fee The multiple of 0.01% to declare the final trading fee the platform collects.\\n    /// @param _deadline The timestamp upto which the market is open for trades.\\n    // 10**6 = 1 USDC, 10**4 = 0.01 USDC or 1 Cent. Therefore base price = A x 1 cent.\\n    /// @param _basePrice Multiple of 1 cent. Price of either of the token.\\n    /// @param _usdcTokenAddress The payment token address.\\n    /// @param _vaultAddress The vault address that will collect the reserveFEE on conclude.\\n    constructor(\\n        uint256 _id,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint256 _basePrice,\\n        address _usdcTokenAddress,\\n        address _vaultAddress\\n    ) {\\n        I_PREDICTION_MARKET_CONTRACT = IPredictionMarket(_msgSender());\\n\\n        I_SELF_ID = _id;\\n        I_BASE_PRICE = _basePrice * 10 ** 4;\\n        I_DEADLINE = _deadline;\\n        I_VAULT_ADDRESS = _vaultAddress;\\n        IERC20 usdcContract = IERC20(_usdcTokenAddress);\\n        I_USDC_CONTRACT = usdcContract;\\n        I_DECIMALS = 10 ** usdcContract.decimals();\\n        I_FEE = (_fee * 10 ** usdcContract.decimals()) / 10 ** 4;\\n\\n        yesIndex.increment();\\n        noHolders.push(address(0));\\n        noIndex.increment();\\n        yesHolders.push(address(0));\\n    }\\n\\n    /// @notice No => Yes\\n    /// @notice Function To Swap 'No' tokens for 'Yes' tokens.\\n    /// @param _amount The amount of tokens to swap. Is a natural number N.\\n    function swapTokenNoWithYes(uint256 _amount) external override isOpen {\\n        uint256 equivalentUSDC = (_amount * I_BASE_PRICE) / I_DECIMALS;\\n        uint256 swapFee = getFee(equivalentUSDC);\\n\\n        uint256 swapTokenDeduction = getFee(_amount);\\n\\n        if (NoBalances[_msgSender()] < _amount)\\n            revert PM_InsufficienTradeTokens();\\n\\n        NoBalances[_msgSender()] -= _amount;\\n        reserveNo -= equivalentUSDC;\\n        YesBalances[_msgSender()] += _amount - swapTokenDeduction;\\n        reserveYes += equivalentUSDC - swapFee;\\n\\n        int256 amountYes = int256(_amount - swapTokenDeduction);\\n        int256 amountNo = int256(_amount);\\n\\n        I_USDC_CONTRACT.transfer(I_VAULT_ADDRESS, swapFee);\\n        reserveFEE += swapFee;\\n\\n        I_PREDICTION_MARKET_CONTRACT.trackProgress(\\n            I_SELF_ID,\\n            _msgSender(),\\n            amountYes,\\n            -1 * amountNo\\n        );\\n        emit SwapOrder(_msgSender(), amountYes, -1 * amountNo);\\n    }\\n\\n    /// @notice Yes => No\\n    /// @notice SAME AS ABOVE BUT TO SWAP 'Yes' for 'No' tokens.\\n    function swapTokenYesWithNo(uint256 _amount) external override isOpen {\\n        uint256 equivalentUSDC = (_amount * I_BASE_PRICE) / I_DECIMALS;\\n        uint256 swapFee = getFee(equivalentUSDC);\\n\\n        uint256 swapTokenDeduction = getFee(_amount);\\n\\n        if (YesBalances[_msgSender()] < _amount)\\n            revert PM_InsufficienTradeTokens();\\n\\n        NoBalances[_msgSender()] += _amount - swapTokenDeduction;\\n        reserveNo += equivalentUSDC - swapFee;\\n        YesBalances[_msgSender()] -= _amount;\\n        reserveYes -= equivalentUSDC;\\n\\n        int256 amountYes = int256(_amount);\\n        int256 amountNo = int256(_amount - swapTokenDeduction);\\n\\n        I_USDC_CONTRACT.transfer(I_VAULT_ADDRESS, swapFee);\\n        reserveFEE += swapFee;\\n\\n        I_PREDICTION_MARKET_CONTRACT.trackProgress(\\n            I_SELF_ID,\\n            _msgSender(),\\n            -1 * amountYes,\\n            amountNo\\n        );\\n        emit SwapOrder(_msgSender(), -1 * amountYes, amountNo);\\n    }\\n\\n    /// @notice To enable the purchase of _amount of 'No' tokens. The total fee is based on _amount * I_BASE_PRICE.\\n    /// @param _amount Total tokens the trader is looking to buy. Is a multiple of 10**decimals()\\n    function buyNoToken(uint256 _amount) external override isOpen {\\n        if (_amount < 1) revert();\\n\\n        uint256 owedAmount = (_amount * I_BASE_PRICE) / I_DECIMALS;\\n\\n        if (I_USDC_CONTRACT.allowance(_msgSender(), address(this)) < owedAmount)\\n            revert PM_InsufficientApprovedAmount();\\n        bool success = I_USDC_CONTRACT.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            owedAmount\\n        );\\n        if (!success) revert PM_TokenTransferFailed();\\n\\n        uint256 fee = getFee(owedAmount);\\n        I_USDC_CONTRACT.transfer(I_VAULT_ADDRESS, fee);\\n\\n        reserveFEE += fee;\\n        reserveUSDC += owedAmount - fee;\\n        reserveNo += owedAmount - fee;\\n\\n        uint256 finalAmount = _amount - getFee(_amount);\\n        NoBalances[_msgSender()] += finalAmount;\\n\\n        if (noTokenAddressToIndex[_msgSender()] == 0) {\\n            uint256 index = noIndex.current();\\n\\n            noTokenAddressToIndex[_msgSender()] = index;\\n            noHolders.push(_msgSender());\\n\\n            noIndex.increment();\\n        }\\n\\n        I_PREDICTION_MARKET_CONTRACT.trackProgress(\\n            I_SELF_ID,\\n            _msgSender(),\\n            0,\\n            int256(finalAmount)\\n        );\\n        emit BuyOrder(_msgSender(), 0, finalAmount);\\n    }\\n\\n    /// @notice SAME AS ABOVE BUT TO PURCHASE 'Yes' TOKENS.\\n    function buyYesToken(uint256 _amount) external override isOpen {\\n        if (_amount < 1) revert();\\n\\n        uint256 owedAmount = (_amount * I_BASE_PRICE) / I_DECIMALS;\\n\\n        if (I_USDC_CONTRACT.allowance(_msgSender(), address(this)) < owedAmount)\\n            revert PM_InsufficientApprovedAmount();\\n        bool success = I_USDC_CONTRACT.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            owedAmount\\n        );\\n        if (!success) revert PM_TokenTransferFailed();\\n\\n        uint256 fee = getFee(owedAmount);\\n        I_USDC_CONTRACT.transfer(I_VAULT_ADDRESS, fee);\\n\\n        reserveFEE += fee;\\n        reserveUSDC += owedAmount - fee;\\n        reserveYes += owedAmount - fee;\\n\\n        uint256 finalAmount = _amount - getFee(_amount);\\n        YesBalances[_msgSender()] += finalAmount;\\n\\n        if (yesTokenAddressToIndex[_msgSender()] == 0) {\\n            uint256 index = yesIndex.current();\\n\\n            yesTokenAddressToIndex[_msgSender()] = index;\\n            yesHolders.push(_msgSender());\\n\\n            yesIndex.increment();\\n        }\\n\\n        I_PREDICTION_MARKET_CONTRACT.trackProgress(\\n            I_SELF_ID,\\n            _msgSender(),\\n            int256(finalAmount),\\n            0\\n        );\\n        emit BuyOrder(_msgSender(), finalAmount, 0);\\n    }\\n\\n    /// @notice Function that allows a trader to dump their tokens.\\n    /// @param _amount The amount of 'No' Tokens the trader is willing to dump.\\n    function sellNoToken(uint256 _amount) external override isOpen {\\n        uint256 totalAmount = (_amount * I_BASE_PRICE) / I_DECIMALS;\\n\\n        if (NoBalances[_msgSender()] < _amount) revert PM_InvalidAmountSet();\\n\\n        uint256 fee = getFee(totalAmount);\\n        I_USDC_CONTRACT.transfer(I_VAULT_ADDRESS, fee);\\n        reserveFEE += fee;\\n\\n        uint256 toSend = totalAmount - fee;\\n        NoBalances[_msgSender()] -= _amount;\\n\\n        if (NoBalances[_msgSender()] == 0) {\\n            uint256 index = noTokenAddressToIndex[_msgSender()];\\n\\n            noHolders[index] = address(0);\\n            noTokenAddressToIndex[_msgSender()] = 0;\\n        }\\n\\n        bool success = I_USDC_CONTRACT.transfer(_msgSender(), toSend);\\n        if (!success) revert PM_TokenTransferFailed();\\n\\n        reserveUSDC -= totalAmount;\\n\\n        I_PREDICTION_MARKET_CONTRACT.trackProgress(\\n            I_SELF_ID,\\n            _msgSender(),\\n            0,\\n            -1 * int256(_amount)\\n        );\\n        emit SellOrder(_msgSender(), 0, _amount);\\n    }\\n\\n    /// @notice SAME AS ABOVE BUT FOR 'Yes' TOKENS.\\n    function sellYesToken(uint256 _amount) external override isOpen {\\n        uint256 totalAmount = (_amount * I_BASE_PRICE) / I_DECIMALS;\\n\\n        if (YesBalances[_msgSender()] < _amount) revert PM_InvalidAmountSet();\\n\\n        uint256 fee = getFee(totalAmount);\\n        I_USDC_CONTRACT.transfer(I_VAULT_ADDRESS, fee);\\n        reserveFEE += fee;\\n\\n        uint256 toSend = totalAmount - fee;\\n        YesBalances[_msgSender()] -= _amount;\\n\\n        if (YesBalances[_msgSender()] == 0) {\\n            uint256 index = yesTokenAddressToIndex[_msgSender()];\\n\\n            yesHolders[index] = address(0);\\n            yesTokenAddressToIndex[_msgSender()] = 0;\\n        }\\n\\n        bool success = I_USDC_CONTRACT.transfer(_msgSender(), toSend);\\n        if (!success) revert PM_TokenTransferFailed();\\n\\n        reserveUSDC -= totalAmount;\\n\\n        I_PREDICTION_MARKET_CONTRACT.trackProgress(\\n            I_SELF_ID,\\n            _msgSender(),\\n            -1 * int256(_amount),\\n            0\\n        );\\n        emit SellOrder(_msgSender(), _amount, 0);\\n    }\\n\\n    /// @notice The trading contract call this function for each individual prediction.\\n    /// Owner being the trading contract.\\n    /// @param vote The nature of the winning side.\\n    /// vote - True => Yes won\\n    /// vote - False => No won\\n    function concludePrediction_3(\\n        bool vote\\n    ) external override isClosed onlyOwner {\\n        winner = vote;\\n        emit WinnerDeclared(vote);\\n\\n        RewardsClaimable = true;\\n\\n        //// IGNORE THIS.\\n        // All the collected fee for the current prediction is sent back to the vault.\\n        // I_USDC_CONTRACT.transfer(I_VAULT_ADDRESS, reserveFEE);\\n    }\\n\\n    /// @notice The function each winner can call to get their share of the total pool.\\n    /// @notice Based on  how much was the initial pool of winner token and the final pool\\n    /// @notice being the sum of both the winner and losing side. The final cut of the user is based on the\\n    /// @notice amount of tokens they held of the winning side.\\n    function collectRewards() external isClaimable {\\n        if (rewardCollected[_msgSender()]) revert PM_RewardAlreadyCollected();\\n\\n        uint256 finalPool = reserveUSDC;\\n        uint256 initialPool;\\n        uint256 userTokenCount;\\n        uint256 userShare;\\n\\n        if (winner == true) {\\n            if (YesBalances[_msgSender()] == 0) revert PM_UserDidNotWin();\\n\\n            initialPool = reserveYes;\\n            userTokenCount = YesBalances[_msgSender()];\\n            YesBalances[_msgSender()] = 0;\\n        } else {\\n            if (NoBalances[_msgSender()] == 0) revert PM_UserDidNotWin();\\n\\n            initialPool = reserveNo;\\n            userTokenCount = NoBalances[_msgSender()];\\n            NoBalances[_msgSender()] = 0;\\n        }\\n\\n        // Calculate the final proportion of the pool they are rewarded.\\n        userShare = (userTokenCount * finalPool) / initialPool;\\n\\n        rewardCollected[_msgSender()] = true;\\n\\n        I_USDC_CONTRACT.transfer(_msgSender(), userShare);\\n        emit RewardCollected(_msgSender(), userShare);\\n    }\\n\\n    /// GETTER FUNCTIONS ==========================================\\n\\n    function getFee(uint256 _amount) public view returns (uint256) {\\n        return (_amount * I_FEE) / I_DECIMALS;\\n    }\\n\\n    function getNoReserve() external view returns (uint256) {\\n        return reserveNo;\\n    }\\n\\n    function getYesReserve() external view returns (uint256) {\\n        return reserveYes;\\n    }\\n\\n    function getYesTokenCount(address _add) external view returns (uint256) {\\n        return YesBalances[_add];\\n    }\\n\\n    function getNoTokenCount(address _add) external view returns (uint256) {\\n        return NoBalances[_add];\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x2eb849cf444ad9d196af75ef40083dfdc408211bf1fc722d48aca74a10190d5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "ConcludeFatalError(uint256,uint256,bool,int224,int224)": {
        "params": {
          "isAbove": "The target orice was supposed to be above a set limit.",
          "predictionId": "The unique identifier of the prediction.",
          "priceReading": "The current price reading provided by a dAPI.",
          "priceTarget": "The target point that was the base for a prediction.",
          "timestamp": "The timestamp when conclude failed."
        }
      },
      "PredictionCreated(uint256,address,address,uint256,uint256)": {
        "params": {
          "creator": "The creator responsible for creating the prediction.",
          "marketHandler": "The address of the MarketHandler that enables the prediction to be traded upon.",
          "predictionId": "The unique identifier of the prediction.",
          "timestamp": "The timestamp when the prediction was created to be traded upon."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "concludePrediction_2(uint256,bool,address)": {
        "params": {
          "_predictionId": "The unique identifier for each prediction created.",
          "_vote": "The final result of the prediction. vote - True : The target price was predicted to be BELOW/ABOVE a threshold AND IS BELOW/ABOVE the threshold respectively. vote - False : The target price was predicted to be BELOW/ABOVE a threshold BUT IS ABOVE/BELOW the threshold respectively."
        }
      },
      "constructor": {
        "params": {
          "_usdc": "The payment token addresTRADING_FEEs."
        }
      },
      "createPrediction(bytes32,address,bool,int224,uint256,uint256)": {
        "params": {
          "_basePrice": "The minimum cost of one 'Yes' or 'No' token for the prediction market to be created. Is a multiple of 0.01 USD or 1 cent.",
          "_deadline": "The timestamp when the target and current price are to be checked against.",
          "_isAbove": "True if for a prediction the price will go above a set limit and false if otherwise.",
          "_tokenSymbol": "The symbol to represent the asset we are prediction upon. Eg : BTC / ETH / XRP etc."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "trackProgress(uint256,address,int256,int256)": {
        "details": "Is important since its harder to track each market handler on 'The Graph' separately."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ConcludeFatalError(uint256,uint256,bool,int224,int224)": {
        "notice": "To track if for some reason a certain prediction was not able to be concluded."
      },
      "PredictionCreated(uint256,address,address,uint256,uint256)": {
        "notice": "Event to declare a prediction market is available to be traded."
      }
    },
    "kind": "user",
    "methods": {
      "PLATFORM_FEE()": {
        "notice": "To avoid DDOS by adding some cost to the creation. Can't be changed once defined."
      },
      "TRADING_FEE()": {
        "notice": "0.01% * 50 = 0.5%."
      },
      "concludePrediction_2(uint256,bool,address)": {
        "notice": "Called by the Settlement contract which concludes the prediction and returns the vote i.e if the prediction was in the favour of 'Yes' or 'No'."
      },
      "createPrediction(bytes32,address,bool,int224,uint256,uint256)": {
        "notice": "Called by the owner on behalf of the _caller and create a market for them.Step necessary to make sure all the parameters are vaild and are true with no manipulation."
      },
      "getNextPredictionId()": {
        "notice": "Getter functions ------"
      },
      "setSettlementAddress(address)": {
        "notice": "Setter functions ------"
      },
      "settlementAddress()": {
        "notice": "The address that starts the chain of concluding a prediction."
      },
      "trackProgress(uint256,address,int256,int256)": {
        "notice": "SPECIAL FUNCTION ====================================================Function provided to act as an aggregator and help track all the things that are happening on all of its child market handlers."
      },
      "vaultAddress()": {
        "notice": "The address responsible for storing the funds collected."
      }
    },
    "notice": "The centre point of Settlement and each new Market Handler",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1001,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "nextPredictionId",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)849_storage"
      },
      {
        "astId": 1013,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "TRADING_FEE",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1019,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "predictions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Prediction)986_storage)"
      },
      {
        "astId": 1024,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "predictionIdToProxy",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1029,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "blacklisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1080,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "settlementAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1083,
        "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int224": {
        "encoding": "inplace",
        "label": "int224",
        "numberOfBytes": "28"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Prediction)986_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Prediction)",
        "numberOfBytes": "32",
        "value": "t_struct(Prediction)986_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)849_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 848,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Prediction)986_storage": {
        "encoding": "inplace",
        "label": "struct Prediction",
        "members": [
          {
            "astId": 967,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "tokenSymbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 969,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "targetPricePoint",
            "offset": 0,
            "slot": "1",
            "type": "t_int224"
          },
          {
            "astId": 971,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "isAbove",
            "offset": 28,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 973,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "proxyAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 975,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 977,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 979,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 981,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "isActive",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 983,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "marketHandler",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 985,
            "contract": "contracts/common/PredictionMarket.sol:PredictionMarket",
            "label": "predictionTokenPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}