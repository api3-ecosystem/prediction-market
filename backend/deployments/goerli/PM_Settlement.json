{
  "address": "0xd315B21C5ddf43fA462E553eFf9eAfFbAbDe5238",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trading",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PM_InvalidPredictionId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionId",
          "type": "uint256"
        }
      ],
      "name": "concludePrediction_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingContract",
      "outputs": [
        {
          "internalType": "contract ITrading",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45113245394ae1daa0a5884200951c001a9bf1142a9759d8b77a368c07ade6cd",
  "receipt": {
    "to": null,
    "from": "0x22b4fD82537573614340314f29bCb2fab182f409",
    "contractAddress": "0xd315B21C5ddf43fA462E553eFf9eAfFbAbDe5238",
    "transactionIndex": 16,
    "gasUsed": "566718",
    "logsBloom": "0x
    "blockHash": "0xcb3e3f023af436d3b48ffd7ff077a2eee64d44c48600a99f7c803bacea11b155",
    "transactionHash": "0x45113245394ae1daa0a5884200951c001a9bf1142a9759d8b77a368c07ade6cd",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 9729708,
        "transactionHash": "0x45113245394ae1daa0a5884200951c001a9bf1142a9759d8b77a368c07ade6cd",
        "address": "0xd315B21C5ddf43fA462E553eFf9eAfFbAbDe5238",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000022b4fd82537573614340314f29bcb2fab182f409"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0xcb3e3f023af436d3b48ffd7ff077a2eee64d44c48600a99f7c803bacea11b155"
      }
    ],
    "blockNumber": 9729708,
    "cumulativeGasUsed": "3252119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9ccdc58EddbdF7c2C317A55E17AddAbEa0ed654b"
  ],
  "numDeployments": 3,
  "solcInputHash": "6b89c73f9a63d55059e9d50996e84879",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trading\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PM_InvalidPredictionId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"concludePrediction_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingContract\",\"outputs\":[{\"internalType\":\"contract ITrading\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract is inherently a data feed reader\",\"kind\":\"dev\",\"methods\":{\"concludePrediction_1(uint256)\":{\"details\":\"We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction. Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC, Cloud-based scheduler.Personally think that the 1st and 3rd options are good candidates.\",\"params\":{\"_predictionId\":\"The unique identifier for the prediction to be concluded.\"}},\"constructor\":{\"params\":{\"_trading\":\"The Trading Contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tradingContract()\":{\"notice\":\"The Trading contract that acts as a middle ground for Settlement and MarketHandler\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/Settlement.sol\":\"PM_Settlement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev See DapiProxy.sol for comments about usage\\ninterface IProxy {\\n    function read() external view returns (int224 value, uint32 timestamp);\\n\\n    function api3ServerV1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3ad69ef6ff3de4056ec43eb8b47465f3d896f88e95cfffb909a6d057b91db17b\",\"license\":\"MIT\"},\"@api3/contracts/v0.8/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\\\";\\n\",\"keccak256\":\"0x46e0969d4682b2dad5c56a5f278ee447a3085fcc66c4e8bd261ef9cdcccfdc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/common/Settlement.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@api3/contracts/v0.8/interfaces/IProxy.sol\\\";\\n\\n/// @dev Current order of settling a market :\\n/// Settlement : concludePrediction_1 -> Trading : conludePrediction_2 -> Each Unique MarketHandler : concludePrediction_3\\n\\n/// @notice We need to track certain properties of the prediction to make sure it it concluded after the deadline only.\\nstruct Prediction {\\n    string tokenSymbol;\\n    int224 targetPricePoint;\\n    bool isAbove;\\n    address proxyAddress;\\n    uint256 fee;\\n    uint256 timestamp;\\n    uint256 deadline;\\n    bool isActive;\\n    address marketHandler;\\n}\\n\\ninterface ITrading {\\n    function concludePrediction_2(uint256, bool) external;\\n\\n    function getNextPredictionId() external view returns (uint256);\\n\\n    function getPrediction(uint256) external view returns (Prediction memory);\\n}\\n\\nerror PM_InvalidPredictionId();\\n\\n/// @dev The contract is inherently a data feed reader\\ncontract PM_Settlement is Ownable {\\n    /// @notice The Trading contract that acts as a middle ground for Settlement and MarketHandler\\n    ITrading public tradingContract;\\n\\n    /// @param _trading The Trading Contract\\n    constructor(address _trading) {\\n        tradingContract = ITrading(_trading);\\n    }\\n\\n    modifier isValidPredictionId(uint256 _id) {\\n        uint256 currentUpper = tradingContract.getNextPredictionId();\\n        if (_id >= currentUpper) revert PM_InvalidPredictionId();\\n        _;\\n    }\\n\\n    /// @dev We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction.\\n    /// Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC,\\n    /// Cloud-based scheduler.\\n    /// @dev Personally think that the 1st and 3rd options are good candidates.\\n    /// @param _predictionId The unique identifier for the prediction to be concluded.\\n    function concludePrediction_1(\\n        uint256 _predictionId\\n    ) external isValidPredictionId(_predictionId) {\\n        Prediction memory associatedPrediction = tradingContract.getPrediction(\\n            _predictionId\\n        );\\n        address associatedProxyAddress = associatedPrediction.proxyAddress;\\n\\n        /// API3 FTW\\n        (int224 value, uint256 timestamp) = IProxy(associatedProxyAddress)\\n            .read();\\n\\n        require(\\n            block.timestamp > associatedPrediction.deadline &&\\n                timestamp > associatedPrediction.deadline,\\n            \\\"Can't run evaluation! Deadline not met.\\\"\\n        );\\n\\n        /// @dev The price was predicted to be above the target point\\n        if (associatedPrediction.isAbove) {\\n            /// @dev And IS ABOVE the target and hence True\\n            if (associatedPrediction.targetPricePoint > value)\\n                tradingContract.concludePrediction_2(_predictionId, true);\\n                /// @dev NOT ABOVE hence False\\n            else tradingContract.concludePrediction_2(_predictionId, false);\\n        } else {\\n            if (associatedPrediction.targetPricePoint < value)\\n                tradingContract.concludePrediction_2(_predictionId, true);\\n            else tradingContract.concludePrediction_2(_predictionId, false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d51070c204ac386386f492511add522f81c4a8cf279812738218b77bf1f546d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161095038038061095083398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b610864806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631c5ecf651461005c578063715018a6146100715780638da5cb5b146100795780639e4bd2e9146100a2578063f2fde38b146100b5575b600080fd5b61006f61006a366004610575565b6100c8565b005b61006f61043e565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b61006f6100c33660046105a3565b610452565b806000600160009054906101000a90046001600160a01b03166001600160a01b0316633dcab2386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014291906105c7565b905080821061016457604051638c3b1e5960e01b815260040160405180910390fd5b600154604051637f41df6760e11b8152600481018590526000916001600160a01b03169063fe83bece90602401600060405180830381865afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d69190810190610708565b9050600081606001519050600080826001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024591906107ee565b63ffffffff16915091508360c001514211801561026557508360c0015181115b6102c65760405162461bcd60e51b815260206004820152602760248201527f43616e27742072756e206576616c756174696f6e2120446561646c696e65206e60448201526637ba1036b2ba1760c91b60648201526084015b60405180910390fd5b8360400151156103855781601b0b8460200151601b0b131561034d5760018054604051630f99b97f60e11b8152600481018a905260248101929092526001600160a01b031690631f3372fe906044015b600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b50505050610435565b600154604051630f99b97f60e11b815260048101899052600060248201526001600160a01b0390911690631f3372fe90604401610316565b81601b0b8460200151601b0b12156103cf5760018054604051630f99b97f60e11b8152600481018a905260248101929092526001600160a01b031690631f3372fe90604401610316565b600154604051630f99b97f60e11b815260048101899052600060248201526001600160a01b0390911690631f3372fe90604401600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050505b50505050505050565b6104466104cb565b6104506000610525565b565b61045a6104cb565b6001600160a01b0381166104bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bd565b6104c881610525565b50565b6000546001600160a01b031633146104505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102bd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561058757600080fd5b5035919050565b6001600160a01b03811681146104c857600080fd5b6000602082840312156105b557600080fd5b81356105c08161058e565b9392505050565b6000602082840312156105d957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561061a5761061a6105e0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610649576106496105e0565b604052919050565b600082601f83011261066257600080fd5b815167ffffffffffffffff81111561067c5761067c6105e0565b6020610690601f8301601f19168201610620565b82815285828487010111156106a457600080fd5b60005b838110156106c25785810183015182820184015282016106a7565b506000928101909101919091529392505050565b8051601b81900b81146106e857600080fd5b919050565b805180151581146106e857600080fd5b80516106e88161058e565b60006020828403121561071a57600080fd5b815167ffffffffffffffff8082111561073257600080fd5b90830190610120828603121561074757600080fd5b61074f6105f6565b82518281111561075e57600080fd5b61076a87828601610651565b825250610779602084016106d6565b602082015261078a604084016106ed565b604082015261079b606084016106fd565b60608201526080830151608082015260a083015160a082015260c083015160c08201526107ca60e084016106ed565b60e082015261010091506107df8284016106fd565b91810191909152949350505050565b6000806040838503121561080157600080fd5b61080a836106d6565b9150602083015163ffffffff8116811461082357600080fd5b80915050925092905056fea26469706673582212206aec83976ef1bd3043dfde530f374ca69a33ce94314c3e8ba50c14b2e741e97164736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631c5ecf651461005c578063715018a6146100715780638da5cb5b146100795780639e4bd2e9146100a2578063f2fde38b146100b5575b600080fd5b61006f61006a366004610575565b6100c8565b005b61006f61043e565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b61006f6100c33660046105a3565b610452565b806000600160009054906101000a90046001600160a01b03166001600160a01b0316633dcab2386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014291906105c7565b905080821061016457604051638c3b1e5960e01b815260040160405180910390fd5b600154604051637f41df6760e11b8152600481018590526000916001600160a01b03169063fe83bece90602401600060405180830381865afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d69190810190610708565b9050600081606001519050600080826001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024591906107ee565b63ffffffff16915091508360c001514211801561026557508360c0015181115b6102c65760405162461bcd60e51b815260206004820152602760248201527f43616e27742072756e206576616c756174696f6e2120446561646c696e65206e60448201526637ba1036b2ba1760c91b60648201526084015b60405180910390fd5b8360400151156103855781601b0b8460200151601b0b131561034d5760018054604051630f99b97f60e11b8152600481018a905260248101929092526001600160a01b031690631f3372fe906044015b600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b50505050610435565b600154604051630f99b97f60e11b815260048101899052600060248201526001600160a01b0390911690631f3372fe90604401610316565b81601b0b8460200151601b0b12156103cf5760018054604051630f99b97f60e11b8152600481018a905260248101929092526001600160a01b031690631f3372fe90604401610316565b600154604051630f99b97f60e11b815260048101899052600060248201526001600160a01b0390911690631f3372fe90604401600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050505b50505050505050565b6104466104cb565b6104506000610525565b565b61045a6104cb565b6001600160a01b0381166104bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bd565b6104c881610525565b50565b6000546001600160a01b031633146104505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102bd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561058757600080fd5b5035919050565b6001600160a01b03811681146104c857600080fd5b6000602082840312156105b557600080fd5b81356105c08161058e565b9392505050565b6000602082840312156105d957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561061a5761061a6105e0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610649576106496105e0565b604052919050565b600082601f83011261066257600080fd5b815167ffffffffffffffff81111561067c5761067c6105e0565b6020610690601f8301601f19168201610620565b82815285828487010111156106a457600080fd5b60005b838110156106c25785810183015182820184015282016106a7565b506000928101909101919091529392505050565b8051601b81900b81146106e857600080fd5b919050565b805180151581146106e857600080fd5b80516106e88161058e565b60006020828403121561071a57600080fd5b815167ffffffffffffffff8082111561073257600080fd5b90830190610120828603121561074757600080fd5b61074f6105f6565b82518281111561075e57600080fd5b61076a87828601610651565b825250610779602084016106d6565b602082015261078a604084016106ed565b604082015261079b606084016106fd565b60608201526080830151608082015260a083015160a082015260c083015160c08201526107ca60e084016106ed565b60e082015261010091506107df8284016106fd565b91810191909152949350505050565b6000806040838503121561080157600080fd5b61080a836106d6565b9150602083015163ffffffff8116811461082357600080fd5b80915050925092905056fea26469706673582212206aec83976ef1bd3043dfde530f374ca69a33ce94314c3e8ba50c14b2e741e97164736f6c63430008120033",
  "devdoc": {
    "details": "The contract is inherently a data feed reader",
    "kind": "dev",
    "methods": {
      "concludePrediction_1(uint256)": {
        "details": "We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction. Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC, Cloud-based scheduler.Personally think that the 1st and 3rd options are good candidates.",
        "params": {
          "_predictionId": "The unique identifier for the prediction to be concluded."
        }
      },
      "constructor": {
        "params": {
          "_trading": "The Trading Contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tradingContract()": {
        "notice": "The Trading contract that acts as a middle ground for Settlement and MarketHandler"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/common/Settlement.sol:PM_Settlement",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1006,
        "contract": "contracts/common/Settlement.sol:PM_Settlement",
        "label": "tradingContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITrading)997"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITrading)997": {
        "encoding": "inplace",
        "label": "contract ITrading",
        "numberOfBytes": "20"
      }
    }
  }
}