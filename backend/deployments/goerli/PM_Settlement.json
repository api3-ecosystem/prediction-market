{
  "address": "0xe4151B95136235b6B253cf29e9Fc7339CaA6F122",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_predictionMarket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PM_InvalidPredictionId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionId",
          "type": "uint256"
        }
      ],
      "name": "concludePrediction_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predictionMarketContract",
      "outputs": [
        {
          "internalType": "contract IPredictionMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8567caf41c56980834beff3b4ed2f10f77a463c920ea4ccddf1a970fa63ac60",
  "receipt": {
    "to": null,
    "from": "0x22b4fD82537573614340314f29bCb2fab182f409",
    "contractAddress": "0xe4151B95136235b6B253cf29e9Fc7339CaA6F122",
    "transactionIndex": 21,
    "gasUsed": "556093",
    "logsBloom": "0x
    "blockHash": "0x4c1b38bf7002c8e5bfcb856ad2d1b04e1ff2f005e32eda1992aadde8f0033288",
    "transactionHash": "0xe8567caf41c56980834beff3b4ed2f10f77a463c920ea4ccddf1a970fa63ac60",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 9739249,
        "transactionHash": "0xe8567caf41c56980834beff3b4ed2f10f77a463c920ea4ccddf1a970fa63ac60",
        "address": "0xe4151B95136235b6B253cf29e9Fc7339CaA6F122",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000022b4fd82537573614340314f29bcb2fab182f409"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x4c1b38bf7002c8e5bfcb856ad2d1b04e1ff2f005e32eda1992aadde8f0033288"
      }
    ],
    "blockNumber": 9739249,
    "cumulativeGasUsed": "9715091",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC16e9f8C3B19369497f9310CC36051e367a0ac22"
  ],
  "numDeployments": 3,
  "solcInputHash": "8e9e1187a9d68a65943f6704ca5f0f81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_predictionMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PM_InvalidPredictionId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"concludePrediction_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictionMarketContract\",\"outputs\":[{\"internalType\":\"contract IPredictionMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract is inherently a data feed reader\",\"kind\":\"dev\",\"methods\":{\"concludePrediction_1(uint256)\":{\"details\":\"We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction. Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC, Cloud-based scheduler.Personally think that the 1st and 3rd options are good candidates.\",\"params\":{\"_predictionId\":\"The unique identifier for the prediction to be concluded.\"}},\"constructor\":{\"params\":{\"_predictionMarket\":\"The Trading Contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"predictionMarketContract()\":{\"notice\":\"The PredictionMarket contract that acts as a middle ground for Settlement and MarketHandler\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/Settlement.sol\":\"PM_Settlement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev See DapiProxy.sol for comments about usage\\ninterface IProxy {\\n    function read() external view returns (int224 value, uint32 timestamp);\\n\\n    function api3ServerV1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3ad69ef6ff3de4056ec43eb8b47465f3d896f88e95cfffb909a6d057b91db17b\",\"license\":\"MIT\"},\"@api3/contracts/v0.8/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\\\";\\n\",\"keccak256\":\"0x46e0969d4682b2dad5c56a5f278ee447a3085fcc66c4e8bd261ef9cdcccfdc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/common/Settlement.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@api3/contracts/v0.8/interfaces/IProxy.sol\\\";\\n\\n/// @dev Current order of settling a market :\\n/// Settlement : concludePrediction_1 -> PredictionMarket : conludePrediction_2 -> Each Unique MarketHandler : concludePrediction_3\\n\\n/// @notice We need to track certain properties of the prediction to make sure it it concluded after the deadline only.\\nstruct Prediction {\\n    string tokenSymbol;\\n    int224 targetPricePoint;\\n    bool isAbove;\\n    address proxyAddress;\\n    uint256 fee;\\n    uint256 timestamp;\\n    uint256 deadline;\\n    bool isActive;\\n    address marketHandler;\\n}\\n\\ninterface IPredictionMarket {\\n    function concludePrediction_2(uint256, bool, address) external;\\n\\n    function getNextPredictionId() external view returns (uint256);\\n\\n    function getPrediction(uint256) external view returns (Prediction memory);\\n}\\n\\nerror PM_InvalidPredictionId();\\n\\n/// @dev The contract is inherently a data feed reader\\ncontract PM_Settlement is Ownable {\\n    /// @notice The PredictionMarket contract that acts as a middle ground for Settlement and MarketHandler\\n    IPredictionMarket public predictionMarketContract;\\n\\n    /// @param _predictionMarket The Trading Contract\\n    constructor(address _predictionMarket) {\\n        predictionMarketContract = IPredictionMarket(_predictionMarket);\\n    }\\n\\n    modifier isValidPredictionId(uint256 _id) {\\n        uint256 currentUpper = predictionMarketContract.getNextPredictionId();\\n        if (_id >= currentUpper) revert PM_InvalidPredictionId();\\n        _;\\n    }\\n\\n    /// @dev We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction.\\n    /// Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC,\\n    /// Cloud-based scheduler.\\n    /// @dev Personally think that the 1st and 3rd options are good candidates.\\n    /// @param _predictionId The unique identifier for the prediction to be concluded.\\n    function concludePrediction_1(\\n        uint256 _predictionId\\n    ) external isValidPredictionId(_predictionId) {\\n        Prediction memory associatedPrediction = predictionMarketContract\\n            .getPrediction(_predictionId);\\n        address associatedProxyAddress = associatedPrediction.proxyAddress;\\n\\n        /// API3 FTW\\n        (int224 value, ) = IProxy(associatedProxyAddress).read();\\n\\n        require(\\n            block.timestamp > associatedPrediction.deadline,\\n            \\\"Can't run evaluation! Deadline not met.\\\"\\n        );\\n\\n        /// @dev The price was predicted to be above the target point\\n        if (associatedPrediction.isAbove) {\\n            /// @dev And IS ABOVE the target and hence True\\n            if (associatedPrediction.targetPricePoint > value)\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    true,\\n                    _msgSender()\\n                );\\n                /// @dev NOT ABOVE hence False\\n            else\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    false,\\n                    _msgSender()\\n                );\\n        } else {\\n            if (associatedPrediction.targetPricePoint < value)\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    true,\\n                    _msgSender()\\n                );\\n            else\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    false,\\n                    _msgSender()\\n                );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0601ca482b78a362336e7ac5818bbdb9c7878ec1fabb8c6968e3a0664f8fd2e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161091f38038061091f83398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b610833806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631c5ecf651461005c578063715018a6146100715780638da5cb5b14610079578063b15a9dd2146100a2578063f2fde38b146100b5575b600080fd5b61006f61006a366004610525565b6100c8565b005b61006f6103ee565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b61006f6100c3366004610553565b610402565b806000600160009054906101000a90046001600160a01b03166001600160a01b0316633dcab2386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101429190610577565b905080821061016457604051638c3b1e5960e01b815260040160405180910390fd5b600154604051637f41df6760e11b8152600481018590526000916001600160a01b03169063fe83bece90602401600060405180830381865afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d691908101906106b8565b90506000816060015190506000816001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610244919061079e565b5090508260c0015142116102af5760405162461bcd60e51b815260206004820152602760248201527f43616e27742072756e206576616c756174696f6e2120446561646c696e65206e60448201526637ba1036b2ba1760c91b60648201526084015b60405180910390fd5b8260400151156103525780601b0b8360200151601b0b131561033857600180546001600160a01b031690631a171f39908890335b6040518463ffffffff1660e01b8152600401610301939291906107de565b600060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b505050506103e6565b6001546001600160a01b0316631a171f39876000336102e3565b80601b0b8360200151601b0b121561038057600180546001600160a01b031690631a171f39908890336102e3565b6001546001600160a01b0316631a171f39876000336040518463ffffffff1660e01b81526004016103b3939291906107de565b600060405180830381600087803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b505050505b505050505050565b6103f661047b565b61040060006104d5565b565b61040a61047b565b6001600160a01b03811661046f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a6565b610478816104d5565b50565b6000546001600160a01b031633146104005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561053757600080fd5b5035919050565b6001600160a01b038116811461047857600080fd5b60006020828403121561056557600080fd5b81356105708161053e565b9392505050565b60006020828403121561058957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156105ca576105ca610590565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105f9576105f9610590565b604052919050565b600082601f83011261061257600080fd5b815167ffffffffffffffff81111561062c5761062c610590565b6020610640601f8301601f191682016105d0565b828152858284870101111561065457600080fd5b60005b83811015610672578581018301518282018401528201610657565b506000928101909101919091529392505050565b8051601b81900b811461069857600080fd5b919050565b8051801515811461069857600080fd5b80516106988161053e565b6000602082840312156106ca57600080fd5b815167ffffffffffffffff808211156106e257600080fd5b9083019061012082860312156106f757600080fd5b6106ff6105a6565b82518281111561070e57600080fd5b61071a87828601610601565b82525061072960208401610686565b602082015261073a6040840161069d565b604082015261074b606084016106ad565b60608201526080830151608082015260a083015160a082015260c083015160c082015261077a60e0840161069d565b60e0820152610100915061078f8284016106ad565b91810191909152949350505050565b600080604083850312156107b157600080fd5b6107ba83610686565b9150602083015163ffffffff811681146107d357600080fd5b809150509250929050565b92835290151560208301526001600160a01b031660408201526060019056fea2646970667358221220abd344bee130ba9b6d2cf41cc443535d7876250bb686d5e904de66766ee829df64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631c5ecf651461005c578063715018a6146100715780638da5cb5b14610079578063b15a9dd2146100a2578063f2fde38b146100b5575b600080fd5b61006f61006a366004610525565b6100c8565b005b61006f6103ee565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b61006f6100c3366004610553565b610402565b806000600160009054906101000a90046001600160a01b03166001600160a01b0316633dcab2386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101429190610577565b905080821061016457604051638c3b1e5960e01b815260040160405180910390fd5b600154604051637f41df6760e11b8152600481018590526000916001600160a01b03169063fe83bece90602401600060405180830381865afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d691908101906106b8565b90506000816060015190506000816001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610244919061079e565b5090508260c0015142116102af5760405162461bcd60e51b815260206004820152602760248201527f43616e27742072756e206576616c756174696f6e2120446561646c696e65206e60448201526637ba1036b2ba1760c91b60648201526084015b60405180910390fd5b8260400151156103525780601b0b8360200151601b0b131561033857600180546001600160a01b031690631a171f39908890335b6040518463ffffffff1660e01b8152600401610301939291906107de565b600060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b505050506103e6565b6001546001600160a01b0316631a171f39876000336102e3565b80601b0b8360200151601b0b121561038057600180546001600160a01b031690631a171f39908890336102e3565b6001546001600160a01b0316631a171f39876000336040518463ffffffff1660e01b81526004016103b3939291906107de565b600060405180830381600087803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b505050505b505050505050565b6103f661047b565b61040060006104d5565b565b61040a61047b565b6001600160a01b03811661046f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a6565b610478816104d5565b50565b6000546001600160a01b031633146104005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561053757600080fd5b5035919050565b6001600160a01b038116811461047857600080fd5b60006020828403121561056557600080fd5b81356105708161053e565b9392505050565b60006020828403121561058957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156105ca576105ca610590565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105f9576105f9610590565b604052919050565b600082601f83011261061257600080fd5b815167ffffffffffffffff81111561062c5761062c610590565b6020610640601f8301601f191682016105d0565b828152858284870101111561065457600080fd5b60005b83811015610672578581018301518282018401528201610657565b506000928101909101919091529392505050565b8051601b81900b811461069857600080fd5b919050565b8051801515811461069857600080fd5b80516106988161053e565b6000602082840312156106ca57600080fd5b815167ffffffffffffffff808211156106e257600080fd5b9083019061012082860312156106f757600080fd5b6106ff6105a6565b82518281111561070e57600080fd5b61071a87828601610601565b82525061072960208401610686565b602082015261073a6040840161069d565b604082015261074b606084016106ad565b60608201526080830151608082015260a083015160a082015260c083015160c082015261077a60e0840161069d565b60e0820152610100915061078f8284016106ad565b91810191909152949350505050565b600080604083850312156107b157600080fd5b6107ba83610686565b9150602083015163ffffffff811681146107d357600080fd5b809150509250929050565b92835290151560208301526001600160a01b031660408201526060019056fea2646970667358221220abd344bee130ba9b6d2cf41cc443535d7876250bb686d5e904de66766ee829df64736f6c63430008120033",
  "devdoc": {
    "details": "The contract is inherently a data feed reader",
    "kind": "dev",
    "methods": {
      "concludePrediction_1(uint256)": {
        "details": "We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction. Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC, Cloud-based scheduler.Personally think that the 1st and 3rd options are good candidates.",
        "params": {
          "_predictionId": "The unique identifier for the prediction to be concluded."
        }
      },
      "constructor": {
        "params": {
          "_predictionMarket": "The Trading Contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "predictionMarketContract()": {
        "notice": "The PredictionMarket contract that acts as a middle ground for Settlement and MarketHandler"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/common/Settlement.sol:PM_Settlement",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1675,
        "contract": "contracts/common/Settlement.sol:PM_Settlement",
        "label": "predictionMarketContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPredictionMarket)1666"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPredictionMarket)1666": {
        "encoding": "inplace",
        "label": "contract IPredictionMarket",
        "numberOfBytes": "20"
      }
    }
  }
}